#!/bin/bash
#
# This is a rather minimal example Argbash potential
# Example taken from http://argbash.readthedocs.io/en/stable/example.html
#
# ARG_OPTIONAL_SINGLE([anchor_tag],[t],[tag from which the changelog should be generated],[@^])
# ARG_OPTIONAL_SINGLE([output_file],[f],[the file into the changelog is written],[CHANGELOG.md])
# ARG_POSITIONAL_SINGLE([changelog_lvl],[threshold for generating changelogs],[])


# ARG_HELP([The general script's help msg])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.6.1 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info
# Generated online by https://argbash.io/generate

die()
{
	local _ret=$2
	test -n "$_ret" || _ret=1
	test "$_PRINT_HELP" = yes && print_help >&2
	echo "$1" >&2
	exit ${_ret}
}

begins_with_short_option()
{
	local first_option all_short_options
	all_short_options='tfh'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}



# THE DEFAULTS INITIALIZATION - POSITIONALS
_positionals=()
# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_anchor_tag="@^"
_arg_output_file="CHANGELOG.md"

print_help ()
{
	printf '%s\n' "The general script's help msg"
	printf 'Usage: %s [-t|--anchor_tag <arg>] [-f|--output_file <arg>] [-h|--help] <changelog_lvl>\n' "$0"
	printf '\t%s\n' "<changelog_lvl>: threshold for generating changelogs"
	printf '\t%s\n' "-t,--anchor_tag: tag from which the changelog should be generated (default: '@^')"
	printf '\t%s\n' "-f,--output_file: the file into the changelog is written (default: 'CHANGELOG.md')"
	printf '\t%s\n' "-h,--help: Prints help"
}

parse_commandline ()
{
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			-t|--anchor_tag)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_anchor_tag="$2"
				shift
				;;
			--anchor_tag=*)
				_arg_anchor_tag="${_key##--anchor_tag=}"
				;;
			-t*)
				_arg_anchor_tag="${_key##-t}"
				;;
			-f|--output_file)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_output_file="$2"
				shift
				;;
			--output_file=*)
				_arg_output_file="${_key##--output_file=}"
				;;
			-f*)
				_arg_output_file="${_key##-f}"
				;;
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			*)
				_positionals+=("$1")
				;;
		esac
		shift
	done
}


handle_passed_args_count ()
{
	_required_args_string="'changelog_lvl'"
	test ${#_positionals[@]} -ge 1 || _PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require exactly 1 (namely: $_required_args_string), but got only ${#_positionals[@]}." 1
	test ${#_positionals[@]} -le 1 || _PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect exactly 1 (namely: $_required_args_string), but got ${#_positionals[@]} (the last one was: '${_positionals[*]: -1}')." 1
}

assign_positional_args ()
{
	_positional_names=('_arg_changelog_lvl' )

	for (( ii = 0; ii < ${#_positionals[@]}; ii++))
	do
		eval "${_positional_names[ii]}=\${_positionals[ii]}" || die "Error during argument parsing, possibly an Argbash bug." 1
	done
}

parse_commandline "$@"
handle_passed_args_count
assign_positional_args

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])

newline="
	"


changelog (){
	echo $3 >> $_arg_output_file
	git log --oneline $(git describe --tags --abbrev=0 $1)..@ --pretty=format:"%b"  | grep "<$2>" | sed "s/<$2>/- /g" | sed "s/<\/$2>//g" >> $_arg_output_file
	echo $newline >> $_arg_output_file
}

beta_changelog (){
	changelog $_arg_anchor_tag "beta" "Internal testing changes:"
}

rc_changelog () {
	changelog $_arg_anchor_tag "rc" "External testing changes:"
}

release_changelog() {
	changelog $_arg_anchor_tag "release" "Release changes:"
}

current_tag() {
	echo "Version:" > $_arg_output_file
	echo `git describe --abbrev=0 --tags` >> $_arg_output_file
	echo $newline >> $_arg_output_file
}

# [ <-- needed because of Argbash

echo "##########################################"
echo "Generating changelog with threshold: $_arg_changelog_lvl"
echo "Anchor-Tag is: $_arg_anchor_tag"
echo "Changelog is written into: $_arg_output_file"
echo "##########################################"

#git log --oneline $(git describe --tags --abbrev=0 $_arg_anchor_tag)..@ --pretty=format:"%b"  | grep "<$_arg_changelog_lvl>" | sed 's/<$_arg_changelog_lvl>/- /g' | sed 's/<\$_arg_changelog_lvl>//g' >> CHANGELOG.md
#git log --oneline $(git describe --tags --abbrev=0 $_arg_anchor_tag)..@ --pretty=format:"%b"  | grep "<$_arg_changelog_lvl>" | sed "s/<${_arg_changelog_lvl}>/- /g" | sed "s/<\/${_arg_changelog_lvl}>//g"

current_tag
case "$_arg_changelog_lvl" in
	"beta")
		beta_changelog
		rc_changelog
		release_changelog
		;;
	"rc")
		rc_changelog
		release_changelog
		;;
	"release")
		release_changelog
		;;
esac

echo -e $changelog_text